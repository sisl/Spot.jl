var documenterSearchIndex = {"docs":
[{"location":"spot_basics/","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"EditURL = \"https://github.com/sisl/Spot.jl/blob/master/docs/src/spot_basics.jl\"","category":"page"},{"location":"spot_basics/#Basics-of-Spot.jl","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"","category":"section"},{"location":"spot_basics/","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"For more extensive tutorials see the original Spot documentation.","category":"page"},{"location":"spot_basics/#Parsing-LTL-Formulas","page":"Basics of Spot.jl","title":"Parsing LTL Formulas","text":"","category":"section"},{"location":"spot_basics/","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"Spot.jl provides a string macro to write ltl formulas: ltl\" ... \", which will create a SpotFormula object.","category":"page"},{"location":"spot_basics/","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"using Spot\n\nsafety = ltl\"!crash U goal\"\nsurveillance = ltl\"G (F (a & (F (b & Fc))))\"","category":"page"},{"location":"spot_basics/#Conversion-to-Automata","page":"Basics of Spot.jl","title":"Conversion to Automata","text":"","category":"section"},{"location":"spot_basics/","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"Use the LTLtranslator constructor to specify the translation options, then use the translate method to convert the LTL formula into an automata.","category":"page"},{"location":"spot_basics/","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"LTLTranslator:","category":"page"},{"location":"spot_basics/","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"tgba::Bool = true outputs Transition-based Generalized Büchi Automata\nbuchi::Bool = false outputs state-based Büchi automata\nmonitor::Bool = false outputs monitors\ndeterministic::Bool = true combined with generic, will do whatever it takes to produce a deterministic automaton, and may use any acceptance condition\ngeneric::Bool = true\nparity::Bool = true combined with deterministic, will produce a deterministic automaton with parity acceptance\nstate_based_acceptance::Bool = true define the acceptance using states","category":"page"},{"location":"spot_basics/","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"translator = LTLTranslator()\nsafety_aut = translate(translator, safety)\n\ntranslator = LTLTranslator(buchi=true, deterministic=true, state_based_acceptance=true)\nsurveillance_aut = translate(translator, surveillance)\nusing TikzPictures; nothing # hide\nsave(SVG(\"test\"), plot_automata(surveillance_aut)); nothing # hide","category":"page"},{"location":"spot_basics/","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"(Image: )","category":"page"},{"location":"spot_basics/#Display-Automata","page":"Basics of Spot.jl","title":"Display Automata","text":"","category":"section"},{"location":"spot_basics/","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"In environment like the vscode julia IDE or in jupyer notebooks, automata will be automatically displayed as a tikz picture. In non interactive environment, you can get a tikzpicture object by calling plot_automata. This object can then be saved to a file and visualized.","category":"page"},{"location":"spot_basics/","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"using TikzPictures\npic = plot_automata(surveillance_aut)\nsave(PDF(\"test\"), pic)","category":"page"},{"location":"spot_basics/#Deterministic-Rabin-Automata","page":"Basics of Spot.jl","title":"Deterministic Rabin Automata","text":"","category":"section"},{"location":"spot_basics/","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"Spot.jl provides a Deterministic Rabin Automata structure which is pure Julia. It can be constructed directly from a LTL formula.","category":"page"},{"location":"spot_basics/","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"dra = DeterministicRabinAutomata(surveillance)\nnextstate(dra, 4, (:a,:b,:c))","category":"page"},{"location":"spot_basics/","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"","category":"page"},{"location":"spot_basics/","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"This page was generated using Literate.jl.","category":"page"},{"location":"basics/#Basics-of-Spot.jl","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"","category":"section"},{"location":"basics/","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"For more extensive tutorials see the original Spot documentation.","category":"page"},{"location":"basics/#Parsing-LTL-Formulas","page":"Basics of Spot.jl","title":"Parsing LTL Formulas","text":"","category":"section"},{"location":"basics/","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"Spot.jl provides a string macro to write ltl formulas: ltl\" ... \", which will create a SpotFormula object.","category":"page"},{"location":"basics/","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"using Spot\n\nsafety = ltl\"!crash U goal\" \nsurveillance = ltl\"G (F (a & (F (b & Fc))))\"\n\n# output\n\n\"GF(a & F(b & Fc))\"","category":"page"},{"location":"basics/#Conversion-to-Automata","page":"Basics of Spot.jl","title":"Conversion to Automata","text":"","category":"section"},{"location":"basics/","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"Use the LTLtranslator constructor to specify the translation options, then use the translate method to convert the LTL formula into an automata.","category":"page"},{"location":"basics/","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"LTLTranslator:","category":"page"},{"location":"basics/","page":"Basics of Spot.jl","title":"Basics of Spot.jl","text":"tgba::Bool = true outputs Transition-based Generalized Büchi Automata\nbuchi::Bool = false outputs state-based Büchi automata\nmonitor::Bool = false outputs monitors\ndeterministic::Bool = true combined with generic, will do whatever it takes to produce a deterministic automaton, and may use any acceptance condition\ngeneric::Bool = true\nparity::Bool = true combined with deterministic, will produce a deterministic automaton with parity acceptance\nstate_based_acceptance::Bool = true define the acceptance using states","category":"page"},{"location":"#About","page":"About","title":"About","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"Spot.jl is a wrapper of the c++ library Spot: a platform for LTL and ω-automata manipulation. It relies on Spotjuliajll.jl, an artifact providing binaries for Spot for a variety of platforms.  Spot.jl exposes only a limited subset of Spot's existing functionalities wrapped into julia functions for easier use. ","category":"page"},{"location":"","page":"About","title":"About","text":"","category":"page"}]
}
